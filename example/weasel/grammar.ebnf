(*
    In the grammar below, the following notations are adopted:
        - The nonterminal symbol `u32` denotes 32-bit unsigned integers.
        - The nonterminal symbol `integer` denotes arbitrary-precision mathematical integers.
        - The nonterminal symbol `real` denotes arbitrary-precision mathematical real numbers.
*)

idchar =
    "0" | ... | "9"
  | "A" | ... | "Z"
  | "a" | ... | "z"
  | "!" | "#" | "$" | "%" | "&" | "'" | "*" | "+" | "-" | "." | "/"
  | ":" | "<" | "=" | ">" | "?" | "@" | "\" | "^" | "_" | "`" | "|" | "~" ;

id =
  idchar , { idchar } ;

ind =
    "$" , id
  | u32 ;

unop =
    "clz"             (on wasm_int_type)
  | "ctz"             (on wasm_int_type)
  | "popcnt"          (on wasm_int_type)
  | "abs"
  | "neg"
  | "sqrt"
  | "ceil"
  | "floor"
  | "trunc"           (on wasm_float_type or real)
  | "nearst" ;        (on wasm_float_type or real)

binop =
    "add" | "+"
  | "sub" | "-"
  | "mul" | "*"
  | "div" | "/"
  | "rem" | "%"       (on wasm_int_type or integer)
  | "min"
  | "max"
  | "and" | "&"       (on wasm_int_type or integer)
  | "or" | "|"        (on wasm_int_type or integer)
  | "xor" | "^"       (on wasm_int_type or integer)
  | "shl" | "<<"      (on wasm_int_type or integer)
  | "shr_s" | ">>"    (on wasm_int_type or integer)
  | "shr_x" | ">>>"   (on wasm_int_type or integer)
  | "rotl"            (on wasm_int_type)
  | "rotr"            (on wasm_int_type)
  | "copysign" ;

memarg =
  "(" , "base" , term , ")" ,
  [ "(" , "offset" , term , ")" ] ,
  [ "(" , "align" , term , ")" ] ;

term =
    "result"
  | "i32_max"
  | "i32_min"
  | "i64_max"
  | "i64_min"
  | integer
  | real
  | ind
  | pterm ;

pterm =
    "result" , [ u32 ]
  | "old" , term
  | "param" , ind
  | "global" , ind
  | "binder" , ind
  | unop , term
  | binop , term,  term
  | "null" , ref_type
  | "ref_func" , ind
  | "table_get" , ind
  | "table_size" , ind
  | "i32_load" , memarg
  | "i64_load" , memarg
  | "f32_load" , memarg
  | "f64_load" , memarg
  | "memory_size" , ind
  | "?:" , term , term , term
  | "let" , numerical_type , [ id ] , term , term
  | "cast" , numerical_type , term
  | (* function application *) ;

unpred =
    "eqz"
  | "is_null" ;       (on ref_type)

binpred =
    "eq" | "="
  | "ne" | "!="
  | "lt" | "<"
  | "gt" | ">"
  | "le" | "<="
  | "ge" | ">=" ;

prop =
    "true"
  | "false"
  | "(" , pprop , ")" ;

pprop =
    "old" , prop
  | "!" , prop
  | "&&" , prop , prop
  | "||" , prop , prop
  | "^^" , prop , prop
  | "==>" , prop , prop
  | "<==>" , prop , prop
  | "?:" , prop , prop , prop
  | "let" , numerical_type , [ id ] , term , prop
  | unpred , prop
  | binpred , prop , prop
  | ("forall" | "∀") , numerical_type , [ id ] , prop
  | ("exists" | "∃") , numerical_type , [ id ] , prop
  | (* predicate application *) ;

wasm_int_type =
    "i32"
  | "i64" ;

wasm_float_type =
    "f32"
  | "f64" ;

wasm_type =
    wasm_int_type
  | wasm_float_type ;

numerical_type =
    wasm_type
  | "integer"
  | "real" ;

ref_type =
    "funcref"
  | "externref" ;

requires_clause = "(" , "requires" , prop , ")" ;

assigns_clause = "(" , "assigns" , ( "nothing" | memarg ) , ")" ;

ensures_clause = "(" , "ensures" , prop , ")" ;

simple_behavior = { requires_clause | assigns_clause | ensures_clause } ;

contract = "(@contract" , ind , simple_behavior , ")" ;

annotation = contract ;
